/*
Violet - A program for editing UML diagrams.

Copyright (C) 2002 Cay S. Horstmann (http://horstmann.com)

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package com.horstmann.violet.framework;

import java.awt.*;
import java.awt.event.*;
import java.beans.*;
import java.io.*;
import javax.swing.*;
import java.beans.XMLEncoder;
import java.beans.XMLDecoder;
import javafx.beans.property.BooleanProperty;
import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleObjectProperty;

import java.io.FileOutputStream;
import java.io.FileInputStream;

class PersistenceFrameTest <E> {
	 private static JFileChooser chooser;
	 private JFrame frame;
	 
	 public PersistenceFrameTest(PersistenceFrameTest<E> reader, PersistenceFrameTest<E> writer) {
	        this.reader = reader;
	        this.writer = writer;
     }
	 
	 public boolean isFileChanged() {
        return fileChanged.get();
    }

    public BooleanProperty fileChangedProperty() {
        return fileChanged;
    }

    public void setFileChanged(boolean fileChanged) {
        this.fileChanged.set(fileChanged);
    }

    public File getFile() {
        return file.get();
    }

    public ObjectProperty<File> fileProperty() {
        return file;
    }

    public void setFile(File file) {
        this.file.set(file);
    }

    public E getContent() {
        return content.get();
    }

    public ObjectProperty<E> contentProperty() {
        return content;
    }

    public void setContent(E content) {
        this.content.set(content);
    }

    /*public void load() throws IOException {
        reader.read(file.get());
        setContent(reader.getContent());
        setFileChanged(false);
    }

    public void save() throws IOException {
        writer.setContent(content.get());
        writer.write(file.get());
        setFileChanged(false);
    }*/
 
	 public void init()
	 {
		 frame = new JFrame();
		 frame.setLayout(new FlowLayout());
		 frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		 frame.setTitle("PersistentFrameTest");
		 frame.setSize(400, 200);
		 
		 JButton loadButton = new JButton("Load");
		 frame.add(loadButton);
		 loadButton.addActionListener(EventHandler.create(ActionListener.class, this, "load"));
		 
		 JButton saveButton = new JButton("Save");
		 frame.add(saveButton);
		 saveButton.addActionListener(EventHandler.create(ActionListener.class, this, "save"));
		 
		 frame.setVisible(true);
	 }
	 
	 public void load()
	 {
		 // show file chooser dialog
		 int r = chooser.showOpenDialog(null);
	 
	 	 // if file selected, open
		 if(r == JFileChooser.APPROVE_OPTION)
		 {
			 try
			 {
				 File file = chooser.getSelectedFile();
			 	XMLDecoder decoder = new XMLDecoder(new FileInputStream(file));
			 	decoder.readObject();
			 	decoder.close();
			 }
			 catch (IOException e)
			 {
				 JOptionPane.showMessageDialog(null, e);
			 }
		 }
	 }
	 
	 public void save()
	 {
		 if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION)
		 {
			 try
				 {
				 File file = chooser.getSelectedFile();
				 XMLEncoder encoder = new XMLEncoder(new FileOutputStream(file));
				 encoder.writeObject(frame);
				 encoder.close();
				 }
			 catch (IOException e)
				 {
				 JOptionPane.showMessageDialog(null, e);
				 }
		 }
	 }
	 
	 private FileReader<E> reader;
     private FileWriter<E> writer;
	 
	 private BooleanProperty fileChanged = new SimpleBooleanProperty(true);
	 private ObjectProperty<File> file = new SimpleObjectProperty<>();
	 private ObjectProperty<E> content = new SimpleObjectProperty<>();

}
